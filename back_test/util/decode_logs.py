import glob
import pandas as pd
import datetime

from pytz import timezone
from datetime import datetime as dt

# Helper function                                                                                
def get_current_time():
    return dt.now(timezone('Asia/Hong_Kong')).strftime('%Y-%m-%d_%H-%M-%S-%f')[:-3]

class Decoder(object):
	@staticmethod
	def get_strategy_status(output_dir):
		# This function decodes the log file generated by backtest_pair.py
		# Returns a dataframe

		# get the path of the log file
		log_path = glob.glob(output_dir + "/*.log")[0]

		# hardcoded keyword
		keyword = "[strategy-status]"

		match_lines = []
		with open(log_path, "r") as file:
			for line in file:
				idx = line.find(keyword)
				if idx >= 0:
					match_lines.append(line[idx:])

		dict_list = []
		for line in match_lines:
			dict_list.append(eval(line[len(keyword) + 2: -1]))

		big_df = pd.DataFrame(dict_list)
		action_df = big_df[['spread', 'date', 'latest_trade_action', 'sell_stk', 'buy_stk', 'buy_amt', 'sell_amt']] 
		action_df = action_df[action_df.latest_trade_action.notnull()].reset_index()

		return big_df, action_df

	@staticmethod
	def get_strategy_performance(output_dir):
		# This function decodes the log file generated by backtest_pair.py
		# Returns a dictionary

		# get the path of the log file
		log_path = glob.glob(output_dir + "/*.log")[0]

		# hardcoded keyword
		keyword = "[pair-performance]"

		match_lines = []
		with open(log_path, "r") as file:
			for line in file:
				idx = line.find(keyword)
				if idx >= 0:
					match_lines.append(line[idx:])

		dict_list = []
		for line in match_lines:
			dict_list.append(eval(line[len(keyword) + 2: -1]))

		return dict_list[0]
    
	@staticmethod
	def get_information_as_df(keyword, output_dir):
		# This function returns a df
		# get the path of the log file
		log_path = glob.glob(output_dir + "/*.log")[0]

		match_lines = []
		with open(log_path, "r") as file:
			for line in file:
				idx = line.find(keyword)
				if idx >= 0:
					match_lines.append(line[idx:])

		dict_list = []
		for line in match_lines:
			dict_list.append(eval(line[len(keyword) + 2: -1]))

		big_df = pd.DataFrame(dict_list)
		return big_df
